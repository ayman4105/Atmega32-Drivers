
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000cce  00000d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  0080007c  0080007c  00000d7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000520  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ea3  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000189a  00000000  00000000  000061af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000030b1  00000000  00000000  00007a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ef4  00000000  00000000  0000aafc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f6b  00000000  00000000  0000b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b2d  00000000  00000000  0000d95b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a8  00000000  00000000  00011488  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__vector_1>
   8:	0c 94 32 03 	jmp	0x664	; 0x664 <__vector_2>
   c:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__vector_6>
  1c:	0c 94 9a 04 	jmp	0x934	; 0x934 <__vector_7>
  20:	0c 94 be 04 	jmp	0x97c	; 0x97c <__vector_8>
  24:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__vector_9>
  28:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__vector_10>
  2c:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__vector_11>
  30:	0c 94 0a 04 	jmp	0x814	; 0x814 <__vector_12>
  34:	0c 94 c2 03 	jmp	0x784	; 0x784 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__vector_15>
  40:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3c       	cpi	r26, 0xC4	; 196
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  8a:	0c 94 65 06 	jmp	0xcca	; 0xcca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <application_intialize>:

void application_intialize (void)
{
	Std_ReturnType ret = E_OK;
	
	ret = led_intialize(&led1);
  92:	80 e6       	ldi	r24, 0x60	; 96
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 72 00 	call	0xe4	; 0xe4 <led_intialize>
	nrf24_init();
  9a:	0e 94 c3 00 	call	0x186	; 0x186 <nrf24_init>
	nrf24_config(2, 32); // Channel 2, 32-byte payload
  9e:	60 e2       	ldi	r22, 0x20	; 32
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 91 01 	call	0x322	; 0x322 <nrf24_config>
	nrf24_rx_address(rx_address);
  a6:	81 e6       	ldi	r24, 0x61	; 97
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 2d 02 	call	0x45a	; 0x45a <nrf24_rx_address>
	nrf24_powerUpRx();
  ae:	0e 94 6f 01 	call	0x2de	; 0x2de <nrf24_powerUpRx>
  b2:	08 95       	ret

000000b4 <main>:
		
int main(void)
{
	Std_ReturnType ret = E_OK;
	
	application_intialize();
  b4:	0e 94 49 00 	call	0x92	; 0x92 <application_intialize>
	
		
	while(1)
	{
		
		if(nrf24_dataReady())
  b8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <nrf24_dataReady>
  bc:	88 23       	and	r24, r24
  be:	41 f0       	breq	.+16     	; 0xd0 <main+0x1c>
		{
			nrf24_getData(rx_payload);
  c0:	84 ea       	ldi	r24, 0xA4	; 164
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <nrf24_getData>
			// Process received data (e.g., print it via UART)
			led_turn_on(&led1);
  c8:	80 e6       	ldi	r24, 0x60	; 96
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 9a 00 	call	0x134	; 0x134 <led_turn_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	89 e6       	ldi	r24, 0x69	; 105
  d4:	98 e1       	ldi	r25, 0x18	; 24
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x22>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x2c>
  e0:	00 00       	nop
  e2:	ea cf       	rjmp	.-44     	; 0xb8 <main+0x4>

000000e4 <led_intialize>:
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue while performing this action
 */
Std_ReturnType led_intialize (const led_t *led)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	1f 92       	push	r1
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
    Std_ReturnType ret = E_OK;
    
    if(NULL == led)
  ee:	00 97       	sbiw	r24, 0x00	; 0
  f0:	e1 f0       	breq	.+56     	; 0x12a <led_intialize+0x46>
  f2:	fc 01       	movw	r30, r24
         ret = E_NOT_OK;
     }
     
    else
    {
        pin_config_t pin_obj = {.port = led -> port_name,
  f4:	20 81       	ld	r18, Z
  f6:	92 2f       	mov	r25, r18
  f8:	97 70       	andi	r25, 0x07	; 7
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	89 2b       	or	r24, r25
                                .pin = led ->pin,
 100:	92 2f       	mov	r25, r18
 102:	92 95       	swap	r25
 104:	9f 70       	andi	r25, 0x0F	; 15
         ret = E_NOT_OK;
     }
     
    else
    {
        pin_config_t pin_obj = {.port = led -> port_name,
 106:	97 70       	andi	r25, 0x07	; 7
 108:	99 0f       	add	r25, r25
 10a:	99 0f       	add	r25, r25
 10c:	99 0f       	add	r25, r25
 10e:	87 7c       	andi	r24, 0xC7	; 199
 110:	89 2b       	or	r24, r25
                                .pin = led ->pin,
                                .direction = GPIO_DIRECTION_OUTPUT,
                                .logic = led ->led_status};
 112:	27 fb       	bst	r18, 7
 114:	22 27       	eor	r18, r18
 116:	20 f9       	bld	r18, 0
         ret = E_NOT_OK;
     }
     
    else
    {
        pin_config_t pin_obj = {.port = led -> port_name,
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	20 fb       	bst	r18, 0
 11c:	87 f9       	bld	r24, 7
 11e:	89 83       	std	Y+1, r24	; 0x01
                                .pin = led ->pin,
                                .direction = GPIO_DIRECTION_OUTPUT,
                                .logic = led ->led_status};
        
        ret = gpio_pin_intialize(&pin_obj);
 120:	ce 01       	movw	r24, r28
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	0e 94 ce 02 	call	0x59c	; 0x59c <gpio_pin_intialize>
 128:	01 c0       	rjmp	.+2      	; 0x12c <led_intialize+0x48>
{
    Std_ReturnType ret = E_OK;
    
    if(NULL == led)
     {
         ret = E_NOT_OK;
 12a:	80 e0       	ldi	r24, 0x00	; 0
    }
    
    
    return ret;
    
}
 12c:	0f 90       	pop	r0
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <led_turn_on>:
 * @return  Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue while performing this action
 */
Std_ReturnType led_turn_on (const led_t *led)
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	1f 92       	push	r1
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
    Std_ReturnType ret = E_OK;
    
    if(NULL == led)
 13e:	00 97       	sbiw	r24, 0x00	; 0
 140:	e9 f0       	breq	.+58     	; 0x17c <led_turn_on+0x48>
 142:	fc 01       	movw	r30, r24
        ret = E_NOT_OK;
     }
     
    else
    {
        pin_config_t pin_obj = { .port = led->port_name,
 144:	20 81       	ld	r18, Z
 146:	92 2f       	mov	r25, r18
 148:	97 70       	andi	r25, 0x07	; 7
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	88 7f       	andi	r24, 0xF8	; 248
 14e:	89 2b       	or	r24, r25
                               .pin = led->pin, 
 150:	92 2f       	mov	r25, r18
 152:	92 95       	swap	r25
 154:	9f 70       	andi	r25, 0x0F	; 15
        ret = E_NOT_OK;
     }
     
    else
    {
        pin_config_t pin_obj = { .port = led->port_name,
 156:	97 70       	andi	r25, 0x07	; 7
 158:	99 0f       	add	r25, r25
 15a:	99 0f       	add	r25, r25
 15c:	99 0f       	add	r25, r25
 15e:	87 7c       	andi	r24, 0xC7	; 199
 160:	89 2b       	or	r24, r25
                               .pin = led->pin, 
                               .direction = GPIO_DIRECTION_OUTPUT,
                               .logic = led->led_status };
 162:	27 fb       	bst	r18, 7
 164:	22 27       	eor	r18, r18
 166:	20 f9       	bld	r18, 0
        ret = E_NOT_OK;
     }
     
    else
    {
        pin_config_t pin_obj = { .port = led->port_name,
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	20 fb       	bst	r18, 0
 16c:	87 f9       	bld	r24, 7
 16e:	89 83       	std	Y+1, r24	; 0x01
                               .pin = led->pin, 
                               .direction = GPIO_DIRECTION_OUTPUT,
                               .logic = led->led_status };
      
        ret = gpio_pin_write_logic(&pin_obj, GPIO_HIGH); 
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 17a:	01 c0       	rjmp	.+2      	; 0x17e <led_turn_on+0x4a>
{
    Std_ReturnType ret = E_OK;
    
    if(NULL == led)
     {
        ret = E_NOT_OK;
 17c:	80 e0       	ldi	r24, 0x00	; 0
    }
    
    
    return ret;
    
}
 17e:	0f 90       	pop	r0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <nrf24_init>:
{
	uint8 rv;
	nrf24_readRegister(OBSERVE_TX,&rv,1);
	rv = rv & 0x0F;
	return rv;
}
 186:	88 e6       	ldi	r24, 0x68	; 104
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 b0 05 	call	0xb60	; 0xb60 <SPI_Init>
 18e:	87 e6       	ldi	r24, 0x67	; 103
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 4d 02 	call	0x49a	; 0x49a <gpio_pin_direction_intialize>
 196:	86 e6       	ldi	r24, 0x66	; 102
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 4d 02 	call	0x49a	; 0x49a <gpio_pin_direction_intialize>
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	87 e6       	ldi	r24, 0x67	; 103
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	86 e6       	ldi	r24, 0x66	; 102
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 1b2:	08 95       	ret

000001b4 <spi_transfer>:
 1b4:	6f b9       	out	0x0f, r22	; 15
 1b6:	77 9b       	sbis	0x0e, 7	; 14
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <spi_transfer+0x2>
 1ba:	8f b1       	in	r24, 0x0f	; 15
 1bc:	08 95       	ret

000001be <nrf24_getStatus>:
 1be:	cf 93       	push	r28
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	86 e6       	ldi	r24, 0x66	; 102
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 1ca:	6f ef       	ldi	r22, 0xFF	; 255
 1cc:	88 e6       	ldi	r24, 0x68	; 104
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <spi_transfer>
 1d4:	c8 2f       	mov	r28, r24
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	86 e6       	ldi	r24, 0x66	; 102
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 1e0:	8c 2f       	mov	r24, r28
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <nrf24_transferSync>:
 1e6:	cf 92       	push	r12
 1e8:	df 92       	push	r13
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	7c 01       	movw	r14, r24
 1f8:	6b 01       	movw	r12, r22
 1fa:	d4 2f       	mov	r29, r20
 1fc:	c0 e0       	ldi	r28, 0x00	; 0
 1fe:	10 c0       	rjmp	.+32     	; 0x220 <nrf24_transferSync+0x3a>
 200:	8c 2f       	mov	r24, r28
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	86 01       	movw	r16, r12
 206:	08 0f       	add	r16, r24
 208:	19 1f       	adc	r17, r25
 20a:	f7 01       	movw	r30, r14
 20c:	e8 0f       	add	r30, r24
 20e:	f9 1f       	adc	r31, r25
 210:	60 81       	ld	r22, Z
 212:	88 e6       	ldi	r24, 0x68	; 104
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 da 00 	call	0x1b4	; 0x1b4 <spi_transfer>
 21a:	f8 01       	movw	r30, r16
 21c:	80 83       	st	Z, r24
 21e:	cf 5f       	subi	r28, 0xFF	; 255
 220:	cd 17       	cp	r28, r29
 222:	70 f3       	brcs	.-36     	; 0x200 <nrf24_transferSync+0x1a>
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	ff 90       	pop	r15
 22e:	ef 90       	pop	r14
 230:	df 90       	pop	r13
 232:	cf 90       	pop	r12
 234:	08 95       	ret

00000236 <nrf24_transmitSync>:
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	8c 01       	movw	r16, r24
 240:	d6 2f       	mov	r29, r22
 242:	c0 e0       	ldi	r28, 0x00	; 0
 244:	09 c0       	rjmp	.+18     	; 0x258 <nrf24_transmitSync+0x22>
 246:	f8 01       	movw	r30, r16
 248:	ec 0f       	add	r30, r28
 24a:	f1 1d       	adc	r31, r1
 24c:	60 81       	ld	r22, Z
 24e:	88 e6       	ldi	r24, 0x68	; 104
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 da 00 	call	0x1b4	; 0x1b4 <spi_transfer>
 256:	cf 5f       	subi	r28, 0xFF	; 255
 258:	cd 17       	cp	r28, r29
 25a:	a8 f3       	brcs	.-22     	; 0x246 <nrf24_transmitSync+0x10>
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	08 95       	ret

00000266 <nrf24_configRegister>:
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	c8 2f       	mov	r28, r24
 26c:	d6 2f       	mov	r29, r22
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	86 e6       	ldi	r24, 0x66	; 102
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 278:	6c 2f       	mov	r22, r28
 27a:	6f 71       	andi	r22, 0x1F	; 31
 27c:	60 62       	ori	r22, 0x20	; 32
 27e:	88 e6       	ldi	r24, 0x68	; 104
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 da 00 	call	0x1b4	; 0x1b4 <spi_transfer>
 286:	6d 2f       	mov	r22, r29
 288:	88 e6       	ldi	r24, 0x68	; 104
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <spi_transfer>
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	86 e6       	ldi	r24, 0x66	; 102
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <nrf24_getData>:
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	ec 01       	movw	r28, r24
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	86 e6       	ldi	r24, 0x66	; 102
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 2b0:	61 e6       	ldi	r22, 0x61	; 97
 2b2:	88 e6       	ldi	r24, 0x68	; 104
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <spi_transfer>
 2ba:	40 91 7c 00 	lds	r20, 0x007C	; 0x80007c <__data_end>
 2be:	be 01       	movw	r22, r28
 2c0:	ce 01       	movw	r24, r28
 2c2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <nrf24_transferSync>
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	86 e6       	ldi	r24, 0x66	; 102
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 2d0:	60 e4       	ldi	r22, 0x40	; 64
 2d2:	87 e0       	ldi	r24, 0x07	; 7
 2d4:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <nrf24_powerUpRx>:
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	86 e6       	ldi	r24, 0x66	; 102
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 2e8:	62 ee       	ldi	r22, 0xE2	; 226
 2ea:	88 e6       	ldi	r24, 0x68	; 104
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 da 00 	call	0x1b4	; 0x1b4 <spi_transfer>
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	86 e6       	ldi	r24, 0x66	; 102
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 2fc:	60 e7       	ldi	r22, 0x70	; 112
 2fe:	87 e0       	ldi	r24, 0x07	; 7
 300:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	87 e6       	ldi	r24, 0x67	; 103
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 30e:	6b e0       	ldi	r22, 0x0B	; 11
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	87 e6       	ldi	r24, 0x67	; 103
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 320:	08 95       	ret

00000322 <nrf24_config>:
 322:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <__data_end>
 326:	68 2f       	mov	r22, r24
 328:	85 e0       	ldi	r24, 0x05	; 5
 32a:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 32e:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <__data_end>
 332:	81 e1       	ldi	r24, 0x11	; 17
 334:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	82 e1       	ldi	r24, 0x12	; 18
 33c:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	83 e1       	ldi	r24, 0x13	; 19
 344:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	84 e1       	ldi	r24, 0x14	; 20
 34c:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	85 e1       	ldi	r24, 0x15	; 21
 354:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	86 e1       	ldi	r24, 0x16	; 22
 35c:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 360:	66 e0       	ldi	r22, 0x06	; 6
 362:	86 e0       	ldi	r24, 0x06	; 6
 364:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 368:	68 e0       	ldi	r22, 0x08	; 8
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 370:	63 e0       	ldi	r22, 0x03	; 3
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 378:	63 e0       	ldi	r22, 0x03	; 3
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 380:	6f e4       	ldi	r22, 0x4F	; 79
 382:	84 e0       	ldi	r24, 0x04	; 4
 384:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	8c e1       	ldi	r24, 0x1C	; 28
 38c:	0e 94 33 01 	call	0x266	; 0x266 <nrf24_configRegister>
 390:	0e 94 6f 01 	call	0x2de	; 0x2de <nrf24_powerUpRx>
 394:	08 95       	ret

00000396 <nrf24_readRegister>:
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	c8 2f       	mov	r28, r24
 3a0:	8b 01       	movw	r16, r22
 3a2:	d4 2f       	mov	r29, r20
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	86 e6       	ldi	r24, 0x66	; 102
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 3ae:	6c 2f       	mov	r22, r28
 3b0:	6f 71       	andi	r22, 0x1F	; 31
 3b2:	88 e6       	ldi	r24, 0x68	; 104
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <spi_transfer>
 3ba:	4d 2f       	mov	r20, r29
 3bc:	b8 01       	movw	r22, r16
 3be:	c8 01       	movw	r24, r16
 3c0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <nrf24_transferSync>
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	86 e6       	ldi	r24, 0x66	; 102
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	08 95       	ret

000003d8 <nrf24_rxFifoEmpty>:
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	1f 92       	push	r1
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	41 e0       	ldi	r20, 0x01	; 1
 3e4:	be 01       	movw	r22, r28
 3e6:	6f 5f       	subi	r22, 0xFF	; 255
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	87 e1       	ldi	r24, 0x17	; 23
 3ec:	0e 94 cb 01 	call	0x396	; 0x396 <nrf24_readRegister>
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	81 70       	andi	r24, 0x01	; 1
 3f4:	0f 90       	pop	r0
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <nrf24_dataReady>:
 3fc:	0e 94 df 00 	call	0x1be	; 0x1be <nrf24_getStatus>
 400:	86 fd       	sbrc	r24, 6
 402:	07 c0       	rjmp	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 404:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <nrf24_rxFifoEmpty>
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	88 23       	and	r24, r24
 40c:	19 f0       	breq	.+6      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	01 c0       	rjmp	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	89 2f       	mov	r24, r25
 416:	08 95       	ret

00000418 <nrf24_writeRegister>:
}


/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8 reg, uint8* value, uint8 len)
{
 418:	0f 93       	push	r16
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	c8 2f       	mov	r28, r24
 422:	8b 01       	movw	r16, r22
 424:	d4 2f       	mov	r29, r20
	gpio_pin_write_logic(&CE_PIN,GPIO_HIGH);
}

static inline void nRF24l01_CSN_LOW(void)
{
	gpio_pin_write_logic(&CSN_PIN,GPIO_LOW);
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	86 e6       	ldi	r24, 0x66	; 102
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8 reg, uint8* value, uint8 len)
{
	nRF24l01_CSN_LOW();
	spi_transfer(&SPI_CONFIG, W_REGISTER | (REGISTER_MASK & reg));
 430:	6c 2f       	mov	r22, r28
 432:	6f 71       	andi	r22, 0x1F	; 31
 434:	60 62       	ori	r22, 0x20	; 32
 436:	88 e6       	ldi	r24, 0x68	; 104
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <spi_transfer>
	nrf24_transmitSync(value,len);
 43e:	6d 2f       	mov	r22, r29
 440:	c8 01       	movw	r24, r16
 442:	0e 94 1b 01 	call	0x236	; 0x236 <nrf24_transmitSync>
	gpio_pin_write_logic(&CSN_PIN,GPIO_LOW);
}

static inline void nRF24l01_CSN_HIGH(void)
{
	gpio_pin_write_logic(&CSN_PIN,GPIO_HIGH);
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	86 e6       	ldi	r24, 0x66	; 102
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
{
	nRF24l01_CSN_LOW();
	spi_transfer(&SPI_CONFIG, W_REGISTER | (REGISTER_MASK & reg));
	nrf24_transmitSync(value,len);
	nRF24l01_CSN_HIGH();
}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	08 95       	ret

0000045a <nrf24_rx_address>:
	// Start listening
	nrf24_powerUpRx();
}
	
void nrf24_rx_address(uint8* adr)
{
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	ec 01       	movw	r28, r24



static inline void nRF24l01_CE_LOW(void)
{
	gpio_pin_write_logic(&CE_PIN,GPIO_LOW);
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	87 e6       	ldi	r24, 0x67	; 103
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
}
	
void nrf24_rx_address(uint8* adr)
{
	nRF24l01_CE_LOW();
	nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 46a:	45 e0       	ldi	r20, 0x05	; 5
 46c:	be 01       	movw	r22, r28
 46e:	8b e0       	ldi	r24, 0x0B	; 11
 470:	0e 94 0c 02 	call	0x418	; 0x418 <nrf24_writeRegister>
}


static inline void nRF24l01_CE_HIGH(void)
{
	gpio_pin_write_logic(&CE_PIN,GPIO_HIGH);
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	87 e6       	ldi	r24, 0x67	; 103
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
void nrf24_rx_address(uint8* adr)
{
	nRF24l01_CE_LOW();
	nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
	nRF24l01_CE_HIGH();
}	
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <ADC_ISR>:
}


void ADC_ISR(void)
{
	ADC_InterruptFlagClear();
 484:	86 b1       	in	r24, 0x06	; 6
 486:	80 61       	ori	r24, 0x10	; 16
 488:	86 b9       	out	0x06, r24	; 6
	if(ADC_InterruptHandler)
 48a:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <ADC_InterruptHandler>
 48e:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <ADC_InterruptHandler+0x1>
 492:	30 97       	sbiw	r30, 0x00	; 0
 494:	09 f0       	breq	.+2      	; 0x498 <ADC_ISR+0x14>
	{
		ADC_InterruptHandler();
 496:	09 95       	icall
 498:	08 95       	ret

0000049a <gpio_pin_direction_intialize>:
    else
    {
        TOOGGLE_BIT(*port_register[_pin_config->port], _pin_config->pin);
    }
    return ret;
}
 49a:	fc 01       	movw	r30, r24
 49c:	89 2b       	or	r24, r25
 49e:	d1 f1       	breq	.+116    	; 0x514 <gpio_pin_direction_intialize+0x7a>
 4a0:	20 81       	ld	r18, Z
 4a2:	26 95       	lsr	r18
 4a4:	26 95       	lsr	r18
 4a6:	26 95       	lsr	r18
 4a8:	27 70       	andi	r18, 0x07	; 7
 4aa:	80 81       	ld	r24, Z
 4ac:	86 fb       	bst	r24, 6
 4ae:	99 27       	eor	r25, r25
 4b0:	90 f9       	bld	r25, 0
 4b2:	86 ff       	sbrs	r24, 6
 4b4:	18 c0       	rjmp	.+48     	; 0x4e6 <gpio_pin_direction_intialize+0x4c>
 4b6:	91 30       	cpi	r25, 0x01	; 1
 4b8:	79 f5       	brne	.+94     	; 0x518 <gpio_pin_direction_intialize+0x7e>
 4ba:	e8 2f       	mov	r30, r24
 4bc:	e7 70       	andi	r30, 0x07	; 7
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	ec 58       	subi	r30, 0x8C	; 140
 4c6:	ff 4f       	sbci	r31, 0xFF	; 255
 4c8:	01 90       	ld	r0, Z+
 4ca:	f0 81       	ld	r31, Z
 4cc:	e0 2d       	mov	r30, r0
 4ce:	30 81       	ld	r19, Z
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <gpio_pin_direction_intialize+0x40>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	2a 95       	dec	r18
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <gpio_pin_direction_intialize+0x3c>
 4de:	83 2b       	or	r24, r19
 4e0:	80 83       	st	Z, r24
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	08 95       	ret
 4e6:	e0 81       	ld	r30, Z
 4e8:	e7 70       	andi	r30, 0x07	; 7
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	ee 0f       	add	r30, r30
 4ee:	ff 1f       	adc	r31, r31
 4f0:	ec 58       	subi	r30, 0x8C	; 140
 4f2:	ff 4f       	sbci	r31, 0xFF	; 255
 4f4:	01 90       	ld	r0, Z+
 4f6:	f0 81       	ld	r31, Z
 4f8:	e0 2d       	mov	r30, r0
 4fa:	30 81       	ld	r19, Z
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <gpio_pin_direction_intialize+0x6c>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	2a 95       	dec	r18
 508:	e2 f7       	brpl	.-8      	; 0x502 <gpio_pin_direction_intialize+0x68>
 50a:	80 95       	com	r24
 50c:	83 23       	and	r24, r19
 50e:	80 83       	st	Z, r24
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	08 95       	ret
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	08 95       	ret
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	08 95       	ret

0000051c <gpio_pin_write_logic>:
 51c:	00 97       	sbiw	r24, 0x00	; 0
 51e:	d1 f1       	breq	.+116    	; 0x594 <gpio_pin_write_logic+0x78>
 520:	dc 01       	movw	r26, r24
 522:	2c 91       	ld	r18, X
 524:	26 95       	lsr	r18
 526:	26 95       	lsr	r18
 528:	26 95       	lsr	r18
 52a:	27 70       	andi	r18, 0x07	; 7
 52c:	66 23       	and	r22, r22
 52e:	19 f0       	breq	.+6      	; 0x536 <gpio_pin_write_logic+0x1a>
 530:	61 30       	cpi	r22, 0x01	; 1
 532:	c9 f0       	breq	.+50     	; 0x566 <gpio_pin_write_logic+0x4a>
 534:	31 c0       	rjmp	.+98     	; 0x598 <gpio_pin_write_logic+0x7c>
 536:	dc 01       	movw	r26, r24
 538:	ec 91       	ld	r30, X
 53a:	e7 70       	andi	r30, 0x07	; 7
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	ee 0f       	add	r30, r30
 540:	ff 1f       	adc	r31, r31
 542:	e4 59       	subi	r30, 0x94	; 148
 544:	ff 4f       	sbci	r31, 0xFF	; 255
 546:	01 90       	ld	r0, Z+
 548:	f0 81       	ld	r31, Z
 54a:	e0 2d       	mov	r30, r0
 54c:	30 81       	ld	r19, Z
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <gpio_pin_write_logic+0x3c>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	2a 95       	dec	r18
 55a:	e2 f7       	brpl	.-8      	; 0x554 <gpio_pin_write_logic+0x38>
 55c:	80 95       	com	r24
 55e:	83 23       	and	r24, r19
 560:	80 83       	st	Z, r24
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	08 95       	ret
 566:	dc 01       	movw	r26, r24
 568:	ec 91       	ld	r30, X
 56a:	e7 70       	andi	r30, 0x07	; 7
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	ee 0f       	add	r30, r30
 570:	ff 1f       	adc	r31, r31
 572:	e4 59       	subi	r30, 0x94	; 148
 574:	ff 4f       	sbci	r31, 0xFF	; 255
 576:	01 90       	ld	r0, Z+
 578:	f0 81       	ld	r31, Z
 57a:	e0 2d       	mov	r30, r0
 57c:	30 81       	ld	r19, Z
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <gpio_pin_write_logic+0x6c>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	2a 95       	dec	r18
 58a:	e2 f7       	brpl	.-8      	; 0x584 <gpio_pin_write_logic+0x68>
 58c:	83 2b       	or	r24, r19
 58e:	80 83       	st	Z, r24
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	08 95       	ret
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	08 95       	ret
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	08 95       	ret

0000059c <gpio_pin_intialize>:
 * @param _pin_config  pointer to the configurations
 * @return Status of the function
 */
#if GPIO_PORT_PIN_CONFIGURATION == CONFIG_ENABLE
Std_ReturnType gpio_pin_intialize (const pin_config_t *_pin_config)
{
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
    Std_ReturnType ret = E_OK;
    if (NULL == _pin_config || _pin_config->pin >= PORT_PIN_MAX_NUMBER)
 5a0:	00 97       	sbiw	r24, 0x00	; 0
 5a2:	61 f0       	breq	.+24     	; 0x5bc <gpio_pin_intialize+0x20>
 5a4:	ec 01       	movw	r28, r24
    {
        ret = E_NOT_OK;
    }
    else
    {
        gpio_pin_direction_intialize(_pin_config);
 5a6:	0e 94 4d 02 	call	0x49a	; 0x49a <gpio_pin_direction_intialize>
        gpio_pin_write_logic(_pin_config, _pin_config->logic);
 5aa:	68 81       	ld	r22, Y
 5ac:	67 fb       	bst	r22, 7
 5ae:	66 27       	eor	r22, r22
 5b0:	60 f9       	bld	r22, 0
 5b2:	ce 01       	movw	r24, r28
 5b4:	0e 94 8e 02 	call	0x51c	; 0x51c <gpio_pin_write_logic>
 * @return Status of the function
 */
#if GPIO_PORT_PIN_CONFIGURATION == CONFIG_ENABLE
Std_ReturnType gpio_pin_intialize (const pin_config_t *_pin_config)
{
    Std_ReturnType ret = E_OK;
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	01 c0       	rjmp	.+2      	; 0x5be <gpio_pin_intialize+0x22>
    if (NULL == _pin_config || _pin_config->pin >= PORT_PIN_MAX_NUMBER)
    {
        ret = E_NOT_OK;
 5bc:	80 e0       	ldi	r24, 0x00	; 0
    {
        gpio_pin_direction_intialize(_pin_config);
        gpio_pin_write_logic(_pin_config, _pin_config->logic);
    }
    return ret;
}
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	08 95       	ret

000005c4 <I2C_ISR>:

void I2C_ISR(void)
{
	
#if I2C_INTERRUPT_FEATURE_ENABLE == INTERRUPT_FEATURE_ENABLE
	I2C_InterruptFlagClear();
 5c4:	86 b7       	in	r24, 0x36	; 54
 5c6:	80 68       	ori	r24, 0x80	; 128
 5c8:	86 bf       	out	0x36, r24	; 54
	
	if(I2C_DefaultInterruptHandle)
 5ca:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <I2C_DefaultInterruptHandle>
 5ce:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <I2C_DefaultInterruptHandle+0x1>
 5d2:	30 97       	sbiw	r30, 0x00	; 0
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <I2C_ISR+0x14>
	{
		I2C_DefaultInterruptHandle();
 5d6:	09 95       	icall
 5d8:	08 95       	ret

000005da <INT0_ISR>:
 * External Interrupt 0 MCAL Helper function 
 */
void INT0_ISR (void)
{
    /* The INT0 external interrupt occurred (must be cleared in software) */
    EXT_INT0_InterruptFlagClear();
 5da:	8a b7       	in	r24, 0x3a	; 58
 5dc:	8f 7b       	andi	r24, 0xBF	; 191
 5de:	8a bf       	out	0x3a, r24	; 58
    
    /* Code : To be executed from MCAL Interrupt Context */
    
    /* Application Callback function gets called every time this ISR executes */
    if(INT0_InterruptHandler)
 5e0:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <INT0_InterruptHandler>
 5e4:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <INT0_InterruptHandler+0x1>
 5e8:	30 97       	sbiw	r30, 0x00	; 0
 5ea:	09 f0       	breq	.+2      	; 0x5ee <INT0_ISR+0x14>
    { 
        INT0_InterruptHandler();
 5ec:	09 95       	icall
 5ee:	08 95       	ret

000005f0 <INT1_ISR>:
 * External Interrupt 1 MCAL Helper function 
 */
void INT1_ISR (void)
{
    /* The INT1 external interrupt occurred (must be cleared in software) */
    EXT_INT1_InterruptFlagClear();
 5f0:	8a b7       	in	r24, 0x3a	; 58
 5f2:	8f 77       	andi	r24, 0x7F	; 127
 5f4:	8a bf       	out	0x3a, r24	; 58
    
    /* Code : To be executed from MCAL Interrupt Context */
    
    /* Application Callback function gets called every time this ISR executes */
    if(INT1_InterruptHandler)
 5f6:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <INT1_InterruptHandler>
 5fa:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <INT1_InterruptHandler+0x1>
 5fe:	30 97       	sbiw	r30, 0x00	; 0
 600:	09 f0       	breq	.+2      	; 0x604 <INT1_ISR+0x14>
    { 
        INT1_InterruptHandler();
 602:	09 95       	icall
 604:	08 95       	ret

00000606 <INT2_ISR>:
 * External Interrupt 2 MCAL Helper function 
 */
void INT2_ISR (void)
{
    /* The INT2 external interrupt occurred (must be cleared in software) */
    EXT_INT2_InterruptFlagClear();
 606:	8a b7       	in	r24, 0x3a	; 58
 608:	8f 7d       	andi	r24, 0xDF	; 223
 60a:	8a bf       	out	0x3a, r24	; 58
    
    /* Code : To be executed from MCAL Interrupt Context */
    
    /* Application Callback function gets called every time this ISR executes */
    if(INT2_InterruptHandler)
 60c:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <INT2_InterruptHandler>
 610:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <INT2_InterruptHandler+0x1>
 614:	30 97       	sbiw	r30, 0x00	; 0
 616:	09 f0       	breq	.+2      	; 0x61a <INT2_ISR+0x14>
    { 
        INT2_InterruptHandler();
 618:	09 95       	icall
 61a:	08 95       	ret

0000061c <__vector_1>:
#include "mcal_interrupt_manger.h"

/* ============ INTx External On Change Interrupt Start ============ */
	
ISR(INT0_vect)
{
 61c:	1f 92       	push	r1
 61e:	0f 92       	push	r0
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	0f 92       	push	r0
 624:	11 24       	eor	r1, r1
 626:	2f 93       	push	r18
 628:	3f 93       	push	r19
 62a:	4f 93       	push	r20
 62c:	5f 93       	push	r21
 62e:	6f 93       	push	r22
 630:	7f 93       	push	r23
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
 636:	af 93       	push	r26
 638:	bf 93       	push	r27
 63a:	ef 93       	push	r30
 63c:	ff 93       	push	r31
	INT0_ISR(); 
 63e:	0e 94 ed 02 	call	0x5da	; 0x5da <INT0_ISR>
}
 642:	ff 91       	pop	r31
 644:	ef 91       	pop	r30
 646:	bf 91       	pop	r27
 648:	af 91       	pop	r26
 64a:	9f 91       	pop	r25
 64c:	8f 91       	pop	r24
 64e:	7f 91       	pop	r23
 650:	6f 91       	pop	r22
 652:	5f 91       	pop	r21
 654:	4f 91       	pop	r20
 656:	3f 91       	pop	r19
 658:	2f 91       	pop	r18
 65a:	0f 90       	pop	r0
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	0f 90       	pop	r0
 660:	1f 90       	pop	r1
 662:	18 95       	reti

00000664 <__vector_2>:

ISR(INT1_vect)
{
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	2f 93       	push	r18
 670:	3f 93       	push	r19
 672:	4f 93       	push	r20
 674:	5f 93       	push	r21
 676:	6f 93       	push	r22
 678:	7f 93       	push	r23
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
 67e:	af 93       	push	r26
 680:	bf 93       	push	r27
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
	INT1_ISR(); 
 686:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <INT1_ISR>
}
 68a:	ff 91       	pop	r31
 68c:	ef 91       	pop	r30
 68e:	bf 91       	pop	r27
 690:	af 91       	pop	r26
 692:	9f 91       	pop	r25
 694:	8f 91       	pop	r24
 696:	7f 91       	pop	r23
 698:	6f 91       	pop	r22
 69a:	5f 91       	pop	r21
 69c:	4f 91       	pop	r20
 69e:	3f 91       	pop	r19
 6a0:	2f 91       	pop	r18
 6a2:	0f 90       	pop	r0
 6a4:	0f be       	out	0x3f, r0	; 63
 6a6:	0f 90       	pop	r0
 6a8:	1f 90       	pop	r1
 6aa:	18 95       	reti

000006ac <__vector_3>:

ISR(INT2_vect)
{
 6ac:	1f 92       	push	r1
 6ae:	0f 92       	push	r0
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	0f 92       	push	r0
 6b4:	11 24       	eor	r1, r1
 6b6:	2f 93       	push	r18
 6b8:	3f 93       	push	r19
 6ba:	4f 93       	push	r20
 6bc:	5f 93       	push	r21
 6be:	6f 93       	push	r22
 6c0:	7f 93       	push	r23
 6c2:	8f 93       	push	r24
 6c4:	9f 93       	push	r25
 6c6:	af 93       	push	r26
 6c8:	bf 93       	push	r27
 6ca:	ef 93       	push	r30
 6cc:	ff 93       	push	r31
	INT2_ISR();  
 6ce:	0e 94 03 03 	call	0x606	; 0x606 <INT2_ISR>
}
 6d2:	ff 91       	pop	r31
 6d4:	ef 91       	pop	r30
 6d6:	bf 91       	pop	r27
 6d8:	af 91       	pop	r26
 6da:	9f 91       	pop	r25
 6dc:	8f 91       	pop	r24
 6de:	7f 91       	pop	r23
 6e0:	6f 91       	pop	r22
 6e2:	5f 91       	pop	r21
 6e4:	4f 91       	pop	r20
 6e6:	3f 91       	pop	r19
 6e8:	2f 91       	pop	r18
 6ea:	0f 90       	pop	r0
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	0f 90       	pop	r0
 6f0:	1f 90       	pop	r1
 6f2:	18 95       	reti

000006f4 <__vector_16>:
	
	
/* ============  Internal Interrupt ADC ============ */
	
ISR(ADC_vect)
{
 6f4:	1f 92       	push	r1
 6f6:	0f 92       	push	r0
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	0f 92       	push	r0
 6fc:	11 24       	eor	r1, r1
 6fe:	2f 93       	push	r18
 700:	3f 93       	push	r19
 702:	4f 93       	push	r20
 704:	5f 93       	push	r21
 706:	6f 93       	push	r22
 708:	7f 93       	push	r23
 70a:	8f 93       	push	r24
 70c:	9f 93       	push	r25
 70e:	af 93       	push	r26
 710:	bf 93       	push	r27
 712:	ef 93       	push	r30
 714:	ff 93       	push	r31
	ADC_ISR();
 716:	0e 94 42 02 	call	0x484	; 0x484 <ADC_ISR>
}
 71a:	ff 91       	pop	r31
 71c:	ef 91       	pop	r30
 71e:	bf 91       	pop	r27
 720:	af 91       	pop	r26
 722:	9f 91       	pop	r25
 724:	8f 91       	pop	r24
 726:	7f 91       	pop	r23
 728:	6f 91       	pop	r22
 72a:	5f 91       	pop	r21
 72c:	4f 91       	pop	r20
 72e:	3f 91       	pop	r19
 730:	2f 91       	pop	r18
 732:	0f 90       	pop	r0
 734:	0f be       	out	0x3f, r0	; 63
 736:	0f 90       	pop	r0
 738:	1f 90       	pop	r1
 73a:	18 95       	reti

0000073c <__vector_15>:


/* ============  EUSART TX INTERNAL INTERRUPT ============ */

ISR(USART_TXC_vect)
{
 73c:	1f 92       	push	r1
 73e:	0f 92       	push	r0
 740:	0f b6       	in	r0, 0x3f	; 63
 742:	0f 92       	push	r0
 744:	11 24       	eor	r1, r1
 746:	2f 93       	push	r18
 748:	3f 93       	push	r19
 74a:	4f 93       	push	r20
 74c:	5f 93       	push	r21
 74e:	6f 93       	push	r22
 750:	7f 93       	push	r23
 752:	8f 93       	push	r24
 754:	9f 93       	push	r25
 756:	af 93       	push	r26
 758:	bf 93       	push	r27
 75a:	ef 93       	push	r30
 75c:	ff 93       	push	r31
	EUSART_TX_ISR();
 75e:	0e 94 44 06 	call	0xc88	; 0xc88 <EUSART_TX_ISR>
}
 762:	ff 91       	pop	r31
 764:	ef 91       	pop	r30
 766:	bf 91       	pop	r27
 768:	af 91       	pop	r26
 76a:	9f 91       	pop	r25
 76c:	8f 91       	pop	r24
 76e:	7f 91       	pop	r23
 770:	6f 91       	pop	r22
 772:	5f 91       	pop	r21
 774:	4f 91       	pop	r20
 776:	3f 91       	pop	r19
 778:	2f 91       	pop	r18
 77a:	0f 90       	pop	r0
 77c:	0f be       	out	0x3f, r0	; 63
 77e:	0f 90       	pop	r0
 780:	1f 90       	pop	r1
 782:	18 95       	reti

00000784 <__vector_13>:

/* ============  EUSART RX INTERNAL INTERRUPT ============ */

ISR(USART_RXC_vect)
{
 784:	1f 92       	push	r1
 786:	0f 92       	push	r0
 788:	0f b6       	in	r0, 0x3f	; 63
 78a:	0f 92       	push	r0
 78c:	11 24       	eor	r1, r1
 78e:	2f 93       	push	r18
 790:	3f 93       	push	r19
 792:	4f 93       	push	r20
 794:	5f 93       	push	r21
 796:	6f 93       	push	r22
 798:	7f 93       	push	r23
 79a:	8f 93       	push	r24
 79c:	9f 93       	push	r25
 79e:	af 93       	push	r26
 7a0:	bf 93       	push	r27
 7a2:	ef 93       	push	r30
 7a4:	ff 93       	push	r31
	EUSART_RX_ISR();
 7a6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <EUSART_RX_ISR>
}
 7aa:	ff 91       	pop	r31
 7ac:	ef 91       	pop	r30
 7ae:	bf 91       	pop	r27
 7b0:	af 91       	pop	r26
 7b2:	9f 91       	pop	r25
 7b4:	8f 91       	pop	r24
 7b6:	7f 91       	pop	r23
 7b8:	6f 91       	pop	r22
 7ba:	5f 91       	pop	r21
 7bc:	4f 91       	pop	r20
 7be:	3f 91       	pop	r19
 7c0:	2f 91       	pop	r18
 7c2:	0f 90       	pop	r0
 7c4:	0f be       	out	0x3f, r0	; 63
 7c6:	0f 90       	pop	r0
 7c8:	1f 90       	pop	r1
 7ca:	18 95       	reti

000007cc <__vector_19>:


/*=============== I2C INTERNAL INTERRUPT===============*/
ISR(TWI_vect)
{
 7cc:	1f 92       	push	r1
 7ce:	0f 92       	push	r0
 7d0:	0f b6       	in	r0, 0x3f	; 63
 7d2:	0f 92       	push	r0
 7d4:	11 24       	eor	r1, r1
 7d6:	2f 93       	push	r18
 7d8:	3f 93       	push	r19
 7da:	4f 93       	push	r20
 7dc:	5f 93       	push	r21
 7de:	6f 93       	push	r22
 7e0:	7f 93       	push	r23
 7e2:	8f 93       	push	r24
 7e4:	9f 93       	push	r25
 7e6:	af 93       	push	r26
 7e8:	bf 93       	push	r27
 7ea:	ef 93       	push	r30
 7ec:	ff 93       	push	r31
	I2C_ISR();
 7ee:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <I2C_ISR>
}
 7f2:	ff 91       	pop	r31
 7f4:	ef 91       	pop	r30
 7f6:	bf 91       	pop	r27
 7f8:	af 91       	pop	r26
 7fa:	9f 91       	pop	r25
 7fc:	8f 91       	pop	r24
 7fe:	7f 91       	pop	r23
 800:	6f 91       	pop	r22
 802:	5f 91       	pop	r21
 804:	4f 91       	pop	r20
 806:	3f 91       	pop	r19
 808:	2f 91       	pop	r18
 80a:	0f 90       	pop	r0
 80c:	0f be       	out	0x3f, r0	; 63
 80e:	0f 90       	pop	r0
 810:	1f 90       	pop	r1
 812:	18 95       	reti

00000814 <__vector_12>:


/* ============  SPI INTERNAL INTERRUPT ============ */
ISR(SPI_STC_vect)
{
 814:	1f 92       	push	r1
 816:	0f 92       	push	r0
 818:	0f b6       	in	r0, 0x3f	; 63
 81a:	0f 92       	push	r0
 81c:	11 24       	eor	r1, r1
 81e:	2f 93       	push	r18
 820:	3f 93       	push	r19
 822:	4f 93       	push	r20
 824:	5f 93       	push	r21
 826:	6f 93       	push	r22
 828:	7f 93       	push	r23
 82a:	8f 93       	push	r24
 82c:	9f 93       	push	r25
 82e:	af 93       	push	r26
 830:	bf 93       	push	r27
 832:	ef 93       	push	r30
 834:	ff 93       	push	r31
	SPI_ISR();
 836:	0e 94 d6 05 	call	0xbac	; 0xbac <SPI_ISR>
}
 83a:	ff 91       	pop	r31
 83c:	ef 91       	pop	r30
 83e:	bf 91       	pop	r27
 840:	af 91       	pop	r26
 842:	9f 91       	pop	r25
 844:	8f 91       	pop	r24
 846:	7f 91       	pop	r23
 848:	6f 91       	pop	r22
 84a:	5f 91       	pop	r21
 84c:	4f 91       	pop	r20
 84e:	3f 91       	pop	r19
 850:	2f 91       	pop	r18
 852:	0f 90       	pop	r0
 854:	0f be       	out	0x3f, r0	; 63
 856:	0f 90       	pop	r0
 858:	1f 90       	pop	r1
 85a:	18 95       	reti

0000085c <__vector_10>:

/*=============== TIMER1 INTERNAL INTERRUPT ===============*/
ISR(TIMER0_COMP_vect)
{
 85c:	1f 92       	push	r1
 85e:	0f 92       	push	r0
 860:	0f b6       	in	r0, 0x3f	; 63
 862:	0f 92       	push	r0
 864:	11 24       	eor	r1, r1
 866:	2f 93       	push	r18
 868:	3f 93       	push	r19
 86a:	4f 93       	push	r20
 86c:	5f 93       	push	r21
 86e:	6f 93       	push	r22
 870:	7f 93       	push	r23
 872:	8f 93       	push	r24
 874:	9f 93       	push	r25
 876:	af 93       	push	r26
 878:	bf 93       	push	r27
 87a:	ef 93       	push	r30
 87c:	ff 93       	push	r31
	TMR0_Compare_ISR();
 87e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <TMR0_Compare_ISR>
}
 882:	ff 91       	pop	r31
 884:	ef 91       	pop	r30
 886:	bf 91       	pop	r27
 888:	af 91       	pop	r26
 88a:	9f 91       	pop	r25
 88c:	8f 91       	pop	r24
 88e:	7f 91       	pop	r23
 890:	6f 91       	pop	r22
 892:	5f 91       	pop	r21
 894:	4f 91       	pop	r20
 896:	3f 91       	pop	r19
 898:	2f 91       	pop	r18
 89a:	0f 90       	pop	r0
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	0f 90       	pop	r0
 8a0:	1f 90       	pop	r1
 8a2:	18 95       	reti

000008a4 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 8a4:	1f 92       	push	r1
 8a6:	0f 92       	push	r0
 8a8:	0f b6       	in	r0, 0x3f	; 63
 8aa:	0f 92       	push	r0
 8ac:	11 24       	eor	r1, r1
 8ae:	2f 93       	push	r18
 8b0:	3f 93       	push	r19
 8b2:	4f 93       	push	r20
 8b4:	5f 93       	push	r21
 8b6:	6f 93       	push	r22
 8b8:	7f 93       	push	r23
 8ba:	8f 93       	push	r24
 8bc:	9f 93       	push	r25
 8be:	af 93       	push	r26
 8c0:	bf 93       	push	r27
 8c2:	ef 93       	push	r30
 8c4:	ff 93       	push	r31
	TMR0_OverFlow_ISR();
 8c6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <TMR0_OverFlow_ISR>
}
 8ca:	ff 91       	pop	r31
 8cc:	ef 91       	pop	r30
 8ce:	bf 91       	pop	r27
 8d0:	af 91       	pop	r26
 8d2:	9f 91       	pop	r25
 8d4:	8f 91       	pop	r24
 8d6:	7f 91       	pop	r23
 8d8:	6f 91       	pop	r22
 8da:	5f 91       	pop	r21
 8dc:	4f 91       	pop	r20
 8de:	3f 91       	pop	r19
 8e0:	2f 91       	pop	r18
 8e2:	0f 90       	pop	r0
 8e4:	0f be       	out	0x3f, r0	; 63
 8e6:	0f 90       	pop	r0
 8e8:	1f 90       	pop	r1
 8ea:	18 95       	reti

000008ec <__vector_6>:


/*=============== TIMER1 INTERNAL INTERRUPT ===============*/
ISR(TIMER1_CAPT_vect)
{
 8ec:	1f 92       	push	r1
 8ee:	0f 92       	push	r0
 8f0:	0f b6       	in	r0, 0x3f	; 63
 8f2:	0f 92       	push	r0
 8f4:	11 24       	eor	r1, r1
 8f6:	2f 93       	push	r18
 8f8:	3f 93       	push	r19
 8fa:	4f 93       	push	r20
 8fc:	5f 93       	push	r21
 8fe:	6f 93       	push	r22
 900:	7f 93       	push	r23
 902:	8f 93       	push	r24
 904:	9f 93       	push	r25
 906:	af 93       	push	r26
 908:	bf 93       	push	r27
 90a:	ef 93       	push	r30
 90c:	ff 93       	push	r31
	TMR1_Capture_ISR();
 90e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <TMR1_Capture_ISR>
}
 912:	ff 91       	pop	r31
 914:	ef 91       	pop	r30
 916:	bf 91       	pop	r27
 918:	af 91       	pop	r26
 91a:	9f 91       	pop	r25
 91c:	8f 91       	pop	r24
 91e:	7f 91       	pop	r23
 920:	6f 91       	pop	r22
 922:	5f 91       	pop	r21
 924:	4f 91       	pop	r20
 926:	3f 91       	pop	r19
 928:	2f 91       	pop	r18
 92a:	0f 90       	pop	r0
 92c:	0f be       	out	0x3f, r0	; 63
 92e:	0f 90       	pop	r0
 930:	1f 90       	pop	r1
 932:	18 95       	reti

00000934 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 934:	1f 92       	push	r1
 936:	0f 92       	push	r0
 938:	0f b6       	in	r0, 0x3f	; 63
 93a:	0f 92       	push	r0
 93c:	11 24       	eor	r1, r1
 93e:	2f 93       	push	r18
 940:	3f 93       	push	r19
 942:	4f 93       	push	r20
 944:	5f 93       	push	r21
 946:	6f 93       	push	r22
 948:	7f 93       	push	r23
 94a:	8f 93       	push	r24
 94c:	9f 93       	push	r25
 94e:	af 93       	push	r26
 950:	bf 93       	push	r27
 952:	ef 93       	push	r30
 954:	ff 93       	push	r31
	TMR1_CompareA_ISR();
 956:	0e 94 0f 06 	call	0xc1e	; 0xc1e <TMR1_CompareA_ISR>
}
 95a:	ff 91       	pop	r31
 95c:	ef 91       	pop	r30
 95e:	bf 91       	pop	r27
 960:	af 91       	pop	r26
 962:	9f 91       	pop	r25
 964:	8f 91       	pop	r24
 966:	7f 91       	pop	r23
 968:	6f 91       	pop	r22
 96a:	5f 91       	pop	r21
 96c:	4f 91       	pop	r20
 96e:	3f 91       	pop	r19
 970:	2f 91       	pop	r18
 972:	0f 90       	pop	r0
 974:	0f be       	out	0x3f, r0	; 63
 976:	0f 90       	pop	r0
 978:	1f 90       	pop	r1
 97a:	18 95       	reti

0000097c <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 97c:	1f 92       	push	r1
 97e:	0f 92       	push	r0
 980:	0f b6       	in	r0, 0x3f	; 63
 982:	0f 92       	push	r0
 984:	11 24       	eor	r1, r1
 986:	2f 93       	push	r18
 988:	3f 93       	push	r19
 98a:	4f 93       	push	r20
 98c:	5f 93       	push	r21
 98e:	6f 93       	push	r22
 990:	7f 93       	push	r23
 992:	8f 93       	push	r24
 994:	9f 93       	push	r25
 996:	af 93       	push	r26
 998:	bf 93       	push	r27
 99a:	ef 93       	push	r30
 99c:	ff 93       	push	r31
	TMR1_CompareB_ISR();
 99e:	0e 94 24 06 	call	0xc48	; 0xc48 <TMR1_CompareB_ISR>
}
 9a2:	ff 91       	pop	r31
 9a4:	ef 91       	pop	r30
 9a6:	bf 91       	pop	r27
 9a8:	af 91       	pop	r26
 9aa:	9f 91       	pop	r25
 9ac:	8f 91       	pop	r24
 9ae:	7f 91       	pop	r23
 9b0:	6f 91       	pop	r22
 9b2:	5f 91       	pop	r21
 9b4:	4f 91       	pop	r20
 9b6:	3f 91       	pop	r19
 9b8:	2f 91       	pop	r18
 9ba:	0f 90       	pop	r0
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	0f 90       	pop	r0
 9c0:	1f 90       	pop	r1
 9c2:	18 95       	reti

000009c4 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 9c4:	1f 92       	push	r1
 9c6:	0f 92       	push	r0
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	0f 92       	push	r0
 9cc:	11 24       	eor	r1, r1
 9ce:	2f 93       	push	r18
 9d0:	3f 93       	push	r19
 9d2:	4f 93       	push	r20
 9d4:	5f 93       	push	r21
 9d6:	6f 93       	push	r22
 9d8:	7f 93       	push	r23
 9da:	8f 93       	push	r24
 9dc:	9f 93       	push	r25
 9de:	af 93       	push	r26
 9e0:	bf 93       	push	r27
 9e2:	ef 93       	push	r30
 9e4:	ff 93       	push	r31
	TMR1_OverFlow_ISR();
 9e6:	0e 94 39 06 	call	0xc72	; 0xc72 <TMR1_OverFlow_ISR>
 9ea:	ff 91       	pop	r31
 9ec:	ef 91       	pop	r30
 9ee:	bf 91       	pop	r27
 9f0:	af 91       	pop	r26
 9f2:	9f 91       	pop	r25
 9f4:	8f 91       	pop	r24
 9f6:	7f 91       	pop	r23
 9f8:	6f 91       	pop	r22
 9fa:	5f 91       	pop	r21
 9fc:	4f 91       	pop	r20
 9fe:	3f 91       	pop	r19
 a00:	2f 91       	pop	r18
 a02:	0f 90       	pop	r0
 a04:	0f be       	out	0x3f, r0	; 63
 a06:	0f 90       	pop	r0
 a08:	1f 90       	pop	r1
 a0a:	18 95       	reti

00000a0c <SPI_Interrupt_Init>:
		
		/* Return data register */
		*_data = SPDR;
	}
	return ret;
}
 a0c:	fc 01       	movw	r30, r24
 a0e:	80 81       	ld	r24, Z
 a10:	91 81       	ldd	r25, Z+1	; 0x01
 a12:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <SPI_InterruptHandler+0x1>
 a16:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <SPI_InterruptHandler>
 a1a:	8d b1       	in	r24, 0x0d	; 13
 a1c:	80 68       	ori	r24, 0x80	; 128
 a1e:	8d b9       	out	0x0d, r24	; 13
 a20:	8e b1       	in	r24, 0x0e	; 14
 a22:	8f 77       	andi	r24, 0x7F	; 127
 a24:	8e b9       	out	0x0e, r24	; 14
 a26:	78 94       	sei
 a28:	08 95       	ret

00000a2a <Clock_Polarity_Clock_Phase_Select>:
 a2a:	fc 01       	movw	r30, r24
 a2c:	83 81       	ldd	r24, Z+3	; 0x03
 a2e:	86 95       	lsr	r24
 a30:	86 95       	lsr	r24
 a32:	86 95       	lsr	r24
 a34:	83 70       	andi	r24, 0x03	; 3
 a36:	82 30       	cpi	r24, 0x02	; 2
 a38:	89 f0       	breq	.+34     	; 0xa5c <Clock_Polarity_Clock_Phase_Select+0x32>
 a3a:	b8 f4       	brcc	.+46     	; 0xa6a <Clock_Polarity_Clock_Phase_Select+0x40>
 a3c:	81 30       	cpi	r24, 0x01	; 1
 a3e:	39 f0       	breq	.+14     	; 0xa4e <Clock_Polarity_Clock_Phase_Select+0x24>
 a40:	8d b1       	in	r24, 0x0d	; 13
 a42:	87 7f       	andi	r24, 0xF7	; 247
 a44:	8d b9       	out	0x0d, r24	; 13
 a46:	8d b1       	in	r24, 0x0d	; 13
 a48:	8b 7f       	andi	r24, 0xFB	; 251
 a4a:	8d b9       	out	0x0d, r24	; 13
 a4c:	08 95       	ret
 a4e:	8d b1       	in	r24, 0x0d	; 13
 a50:	87 7f       	andi	r24, 0xF7	; 247
 a52:	8d b9       	out	0x0d, r24	; 13
 a54:	8d b1       	in	r24, 0x0d	; 13
 a56:	84 60       	ori	r24, 0x04	; 4
 a58:	8d b9       	out	0x0d, r24	; 13
 a5a:	08 95       	ret
 a5c:	8d b1       	in	r24, 0x0d	; 13
 a5e:	88 60       	ori	r24, 0x08	; 8
 a60:	8d b9       	out	0x0d, r24	; 13
 a62:	8d b1       	in	r24, 0x0d	; 13
 a64:	8b 7f       	andi	r24, 0xFB	; 251
 a66:	8d b9       	out	0x0d, r24	; 13
 a68:	08 95       	ret
 a6a:	8d b1       	in	r24, 0x0d	; 13
 a6c:	88 60       	ori	r24, 0x08	; 8
 a6e:	8d b9       	out	0x0d, r24	; 13
 a70:	8d b1       	in	r24, 0x0d	; 13
 a72:	84 60       	ori	r24, 0x04	; 4
 a74:	8d b9       	out	0x0d, r24	; 13
 a76:	08 95       	ret

00000a78 <SPI_Master_Mode_Configurations>:
 a78:	0f 93       	push	r16
 a7a:	1f 93       	push	r17
 a7c:	cf 93       	push	r28
 a7e:	df 93       	push	r29
 a80:	00 d0       	rcall	.+0      	; 0xa82 <SPI_Master_Mode_Configurations+0xa>
 a82:	00 d0       	rcall	.+0      	; 0xa84 <SPI_Master_Mode_Configurations+0xc>
 a84:	cd b7       	in	r28, 0x3d	; 61
 a86:	de b7       	in	r29, 0x3e	; 62
 a88:	8c 01       	movw	r16, r24
 a8a:	81 e6       	ldi	r24, 0x61	; 97
 a8c:	89 83       	std	Y+1, r24	; 0x01
 a8e:	89 e6       	ldi	r24, 0x69	; 105
 a90:	8a 83       	std	Y+2, r24	; 0x02
 a92:	81 e3       	ldi	r24, 0x31	; 49
 a94:	8b 83       	std	Y+3, r24	; 0x03
 a96:	89 e7       	ldi	r24, 0x79	; 121
 a98:	8c 83       	std	Y+4, r24	; 0x04
 a9a:	ce 01       	movw	r24, r28
 a9c:	01 96       	adiw	r24, 0x01	; 1
 a9e:	0e 94 4d 02 	call	0x49a	; 0x49a <gpio_pin_direction_intialize>
 aa2:	ce 01       	movw	r24, r28
 aa4:	02 96       	adiw	r24, 0x02	; 2
 aa6:	0e 94 4d 02 	call	0x49a	; 0x49a <gpio_pin_direction_intialize>
 aaa:	ce 01       	movw	r24, r28
 aac:	03 96       	adiw	r24, 0x03	; 3
 aae:	0e 94 4d 02 	call	0x49a	; 0x49a <gpio_pin_direction_intialize>
 ab2:	ce 01       	movw	r24, r28
 ab4:	04 96       	adiw	r24, 0x04	; 4
 ab6:	0e 94 4d 02 	call	0x49a	; 0x49a <gpio_pin_direction_intialize>
 aba:	8d b1       	in	r24, 0x0d	; 13
 abc:	80 61       	ori	r24, 0x10	; 16
 abe:	8d b9       	out	0x0d, r24	; 13
 ac0:	f8 01       	movw	r30, r16
 ac2:	83 81       	ldd	r24, Z+3	; 0x03
 ac4:	87 70       	andi	r24, 0x07	; 7
 ac6:	82 30       	cpi	r24, 0x02	; 2
 ac8:	c9 f0       	breq	.+50     	; 0xafc <SPI_Master_Mode_Configurations+0x84>
 aca:	28 f4       	brcc	.+10     	; 0xad6 <SPI_Master_Mode_Configurations+0x5e>
 acc:	88 23       	and	r24, r24
 ace:	41 f0       	breq	.+16     	; 0xae0 <SPI_Master_Mode_Configurations+0x68>
 ad0:	81 30       	cpi	r24, 0x01	; 1
 ad2:	69 f0       	breq	.+26     	; 0xaee <SPI_Master_Mode_Configurations+0x76>
 ad4:	2a c0       	rjmp	.+84     	; 0xb2a <SPI_Master_Mode_Configurations+0xb2>
 ad6:	83 30       	cpi	r24, 0x03	; 3
 ad8:	c1 f0       	breq	.+48     	; 0xb0a <SPI_Master_Mode_Configurations+0x92>
 ada:	84 30       	cpi	r24, 0x04	; 4
 adc:	e9 f0       	breq	.+58     	; 0xb18 <SPI_Master_Mode_Configurations+0xa0>
 ade:	25 c0       	rjmp	.+74     	; 0xb2a <SPI_Master_Mode_Configurations+0xb2>
 ae0:	8d b1       	in	r24, 0x0d	; 13
 ae2:	8e 7f       	andi	r24, 0xFE	; 254
 ae4:	8d b9       	out	0x0d, r24	; 13
 ae6:	8d b1       	in	r24, 0x0d	; 13
 ae8:	8d 7f       	andi	r24, 0xFD	; 253
 aea:	8d b9       	out	0x0d, r24	; 13
 aec:	1e c0       	rjmp	.+60     	; 0xb2a <SPI_Master_Mode_Configurations+0xb2>
 aee:	8d b1       	in	r24, 0x0d	; 13
 af0:	81 60       	ori	r24, 0x01	; 1
 af2:	8d b9       	out	0x0d, r24	; 13
 af4:	8d b1       	in	r24, 0x0d	; 13
 af6:	8d 7f       	andi	r24, 0xFD	; 253
 af8:	8d b9       	out	0x0d, r24	; 13
 afa:	17 c0       	rjmp	.+46     	; 0xb2a <SPI_Master_Mode_Configurations+0xb2>
 afc:	8d b1       	in	r24, 0x0d	; 13
 afe:	8e 7f       	andi	r24, 0xFE	; 254
 b00:	8d b9       	out	0x0d, r24	; 13
 b02:	8d b1       	in	r24, 0x0d	; 13
 b04:	82 60       	ori	r24, 0x02	; 2
 b06:	8d b9       	out	0x0d, r24	; 13
 b08:	10 c0       	rjmp	.+32     	; 0xb2a <SPI_Master_Mode_Configurations+0xb2>
 b0a:	8d b1       	in	r24, 0x0d	; 13
 b0c:	81 60       	ori	r24, 0x01	; 1
 b0e:	8d b9       	out	0x0d, r24	; 13
 b10:	8d b1       	in	r24, 0x0d	; 13
 b12:	82 60       	ori	r24, 0x02	; 2
 b14:	8d b9       	out	0x0d, r24	; 13
 b16:	09 c0       	rjmp	.+18     	; 0xb2a <SPI_Master_Mode_Configurations+0xb2>
 b18:	8d b1       	in	r24, 0x0d	; 13
 b1a:	8e 7f       	andi	r24, 0xFE	; 254
 b1c:	8d b9       	out	0x0d, r24	; 13
 b1e:	8d b1       	in	r24, 0x0d	; 13
 b20:	8d 7f       	andi	r24, 0xFD	; 253
 b22:	8d b9       	out	0x0d, r24	; 13
 b24:	8e b1       	in	r24, 0x0e	; 14
 b26:	81 60       	ori	r24, 0x01	; 1
 b28:	8e b9       	out	0x0e, r24	; 14
 b2a:	0f 90       	pop	r0
 b2c:	0f 90       	pop	r0
 b2e:	0f 90       	pop	r0
 b30:	0f 90       	pop	r0
 b32:	df 91       	pop	r29
 b34:	cf 91       	pop	r28
 b36:	1f 91       	pop	r17
 b38:	0f 91       	pop	r16
 b3a:	08 95       	ret

00000b3c <SPI_Slave_Mode_Configurations>:
 b3c:	cf 93       	push	r28
 b3e:	df 93       	push	r29
 b40:	1f 92       	push	r1
 b42:	cd b7       	in	r28, 0x3d	; 61
 b44:	de b7       	in	r29, 0x3e	; 62
 b46:	81 e7       	ldi	r24, 0x71	; 113
 b48:	89 83       	std	Y+1, r24	; 0x01
 b4a:	ce 01       	movw	r24, r28
 b4c:	01 96       	adiw	r24, 0x01	; 1
 b4e:	0e 94 4d 02 	call	0x49a	; 0x49a <gpio_pin_direction_intialize>
 b52:	8d b1       	in	r24, 0x0d	; 13
 b54:	8f 7e       	andi	r24, 0xEF	; 239
 b56:	8d b9       	out	0x0d, r24	; 13
 b58:	0f 90       	pop	r0
 b5a:	df 91       	pop	r29
 b5c:	cf 91       	pop	r28
 b5e:	08 95       	ret

00000b60 <SPI_Init>:
 b60:	cf 93       	push	r28
 b62:	df 93       	push	r29
 b64:	00 97       	sbiw	r24, 0x00	; 0
 b66:	f1 f0       	breq	.+60     	; 0xba4 <SPI_Init+0x44>
 b68:	ec 01       	movw	r28, r24
 b6a:	8d b1       	in	r24, 0x0d	; 13
 b6c:	8f 7b       	andi	r24, 0xBF	; 191
 b6e:	8d b9       	out	0x0d, r24	; 13
 b70:	8a 81       	ldd	r24, Y+2	; 0x02
 b72:	81 30       	cpi	r24, 0x01	; 1
 b74:	21 f4       	brne	.+8      	; 0xb7e <SPI_Init+0x1e>
 b76:	ce 01       	movw	r24, r28
 b78:	0e 94 3c 05 	call	0xa78	; 0xa78 <SPI_Master_Mode_Configurations>
 b7c:	05 c0       	rjmp	.+10     	; 0xb88 <SPI_Init+0x28>
 b7e:	81 11       	cpse	r24, r1
 b80:	03 c0       	rjmp	.+6      	; 0xb88 <SPI_Init+0x28>
 b82:	ce 01       	movw	r24, r28
 b84:	0e 94 9e 05 	call	0xb3c	; 0xb3c <SPI_Slave_Mode_Configurations>
 b88:	ce 01       	movw	r24, r28
 b8a:	0e 94 15 05 	call	0xa2a	; 0xa2a <Clock_Polarity_Clock_Phase_Select>
 b8e:	8b 81       	ldd	r24, Y+3	; 0x03
 b90:	85 ff       	sbrs	r24, 5
 b92:	03 c0       	rjmp	.+6      	; 0xb9a <SPI_Init+0x3a>
 b94:	ce 01       	movw	r24, r28
 b96:	0e 94 06 05 	call	0xa0c	; 0xa0c <SPI_Interrupt_Init>
 b9a:	8d b1       	in	r24, 0x0d	; 13
 b9c:	80 64       	ori	r24, 0x40	; 64
 b9e:	8d b9       	out	0x0d, r24	; 13
 ba0:	81 e0       	ldi	r24, 0x01	; 1
 ba2:	01 c0       	rjmp	.+2      	; 0xba6 <SPI_Init+0x46>
 ba4:	80 e0       	ldi	r24, 0x00	; 0
 ba6:	df 91       	pop	r29
 ba8:	cf 91       	pop	r28
 baa:	08 95       	ret

00000bac <SPI_ISR>:


void SPI_ISR(void)
{
#if SPI_INTERRUPT_FEATURE_ENABLE==INTERRUPT_FEATURE_ENABLE
	SPI_InterruptFlagClear();
 bac:	8e b1       	in	r24, 0x0e	; 14
 bae:	8f 77       	andi	r24, 0x7F	; 127
 bb0:	8e b9       	out	0x0e, r24	; 14
	if(SPI_InterruptHandler)
 bb2:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <SPI_InterruptHandler>
 bb6:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <SPI_InterruptHandler+0x1>
 bba:	30 97       	sbiw	r30, 0x00	; 0
 bbc:	09 f0       	breq	.+2      	; 0xbc0 <SPI_ISR+0x14>
	{
		SPI_InterruptHandler();	
 bbe:	09 95       	icall
 bc0:	08 95       	ret

00000bc2 <TMR0_Compare_ISR>:
}


void TMR0_Compare_ISR(void)
{
	TMR0_Compare_InterruptFlagClear();
 bc2:	88 b7       	in	r24, 0x38	; 56
 bc4:	82 60       	ori	r24, 0x02	; 2
 bc6:	88 bf       	out	0x38, r24	; 56
	
	//TIMER0_SetCompareUnit(compare_value) /* Initialize the compare value again */
	
	if(TMR0_Compare_InterruptHandler)
 bc8:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <TMR0_Compare_InterruptHandler>
 bcc:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <TMR0_Compare_InterruptHandler+0x1>
 bd0:	30 97       	sbiw	r30, 0x00	; 0
 bd2:	09 f0       	breq	.+2      	; 0xbd6 <TMR0_Compare_ISR+0x14>
	{
		TMR0_Compare_InterruptHandler();     /* Call the callback function */
 bd4:	09 95       	icall
 bd6:	08 95       	ret

00000bd8 <TMR0_OverFlow_ISR>:
}


void TMR0_OverFlow_ISR(void)
{
	TMR0_OverFlow_InterruptFlagClear();
 bd8:	88 b7       	in	r24, 0x38	; 56
 bda:	81 60       	ori	r24, 0x01	; 1
 bdc:	88 bf       	out	0x38, r24	; 56
	
	TIMER0_Set(timer0_preload_value);  /* Initialize the pre-loaded value again */
 bde:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <timer0_preload_value>
 be2:	82 bf       	out	0x32, r24	; 50
	
	if(TMR0_OverFlow_InterruptHandler)
 be4:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <TMR0_OverFlow_InterruptHandler>
 be8:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <TMR0_OverFlow_InterruptHandler+0x1>
 bec:	30 97       	sbiw	r30, 0x00	; 0
 bee:	09 f0       	breq	.+2      	; 0xbf2 <TMR0_OverFlow_ISR+0x1a>
	{
		TMR0_OverFlow_InterruptHandler();     /* Call the callback function */
 bf0:	09 95       	icall
 bf2:	08 95       	ret

00000bf4 <TMR1_Capture_ISR>:



void TMR1_Capture_ISR(void)
{
	TMR1_Capture_InterruptFlagClear();
 bf4:	88 b7       	in	r24, 0x38	; 56
 bf6:	80 62       	ori	r24, 0x20	; 32
 bf8:	88 bf       	out	0x38, r24	; 56
	
	ICR1H = (capture_value) >> 8;   /* Initialize the capture value value again */
 bfa:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <capture_value>
 bfe:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <capture_value+0x1>
 c02:	97 bd       	out	0x27, r25	; 39
	ICR1L = (uint8)(capture_value); /* Initialize the capture value value again */
 c04:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <capture_value>
 c08:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <capture_value+0x1>
 c0c:	86 bd       	out	0x26, r24	; 38
	
	if(TMR1_Capture_InterruptHandler)
 c0e:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <TMR1_Capture_InterruptHandler>
 c12:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <TMR1_Capture_InterruptHandler+0x1>
 c16:	30 97       	sbiw	r30, 0x00	; 0
 c18:	09 f0       	breq	.+2      	; 0xc1c <TMR1_Capture_ISR+0x28>
	{
		TMR1_Capture_InterruptHandler();     /* Call the callback function */
 c1a:	09 95       	icall
 c1c:	08 95       	ret

00000c1e <TMR1_CompareA_ISR>:
}


void TMR1_CompareA_ISR(void)
{
	TMR1_CompareA_InterruptFlagClear();
 c1e:	88 b7       	in	r24, 0x38	; 56
 c20:	80 61       	ori	r24, 0x10	; 16
 c22:	88 bf       	out	0x38, r24	; 56
	
	OCR1AH = (compareA_value) >> 8;   /* Initialize the compareA value value again */
 c24:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <compareA_value>
 c28:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <compareA_value+0x1>
 c2c:	9b bd       	out	0x2b, r25	; 43
	OCR1AL = (uint8)(compareA_value); /* Initialize the compareA value value again */
 c2e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <compareA_value>
 c32:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <compareA_value+0x1>
 c36:	8a bd       	out	0x2a, r24	; 42
	
	if(TMR1_CompareA_InterruptHandler)
 c38:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <TMR1_CompareA_InterruptHandler>
 c3c:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <TMR1_CompareA_InterruptHandler+0x1>
 c40:	30 97       	sbiw	r30, 0x00	; 0
 c42:	09 f0       	breq	.+2      	; 0xc46 <TMR1_CompareA_ISR+0x28>
	{
		TMR1_CompareA_InterruptHandler();     /* Call the callback function */
 c44:	09 95       	icall
 c46:	08 95       	ret

00000c48 <TMR1_CompareB_ISR>:
	}
}

void TMR1_CompareB_ISR(void)
{
	TMR1_CompareB_InterruptFlagClear();	
 c48:	88 b7       	in	r24, 0x38	; 56
 c4a:	88 60       	ori	r24, 0x08	; 8
 c4c:	88 bf       	out	0x38, r24	; 56
	
	OCR1BH = (compareB_value) >> 8;   /* Initialize the compareB value value again */
 c4e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <compareB_value>
 c52:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <compareB_value+0x1>
 c56:	99 bd       	out	0x29, r25	; 41
	OCR1BL = (uint8)(compareB_value); /* Initialize the compareB value value again */
 c58:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <compareB_value>
 c5c:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <compareB_value+0x1>
 c60:	88 bd       	out	0x28, r24	; 40
	
	if(TMR1_CompareB_InterruptHandler)
 c62:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <TMR1_CompareB_InterruptHandler>
 c66:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <TMR1_CompareB_InterruptHandler+0x1>
 c6a:	30 97       	sbiw	r30, 0x00	; 0
 c6c:	09 f0       	breq	.+2      	; 0xc70 <TMR1_CompareB_ISR+0x28>
	{
		TMR1_CompareB_InterruptHandler();     /* Call the callback function */
 c6e:	09 95       	icall
 c70:	08 95       	ret

00000c72 <TMR1_OverFlow_ISR>:
	}
}

void TMR1_OverFlow_ISR(void)
{
	TMR1_OverFlow_InterruptFlagClear();
 c72:	88 b7       	in	r24, 0x38	; 56
 c74:	84 60       	ori	r24, 0x04	; 4
 c76:	88 bf       	out	0x38, r24	; 56
	
	//TCNT1H = (timer1_preload) >> 8;   /* Initialize the pre-loaded value again */
	//TCNT1L = (uint8)(timer1_preload); /* Initialize the pre-loaded value again */
	
	if(TMR1_OverFlow_InterruptHandler)
 c78:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <TMR1_OverFlow_InterruptHandler>
 c7c:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <TMR1_OverFlow_InterruptHandler+0x1>
 c80:	30 97       	sbiw	r30, 0x00	; 0
 c82:	09 f0       	breq	.+2      	; 0xc86 <TMR1_OverFlow_ISR+0x14>
	{
		TMR1_OverFlow_InterruptHandler();     /* Call the callback function */
 c84:	09 95       	icall
 c86:	08 95       	ret

00000c88 <EUSART_TX_ISR>:
}


void EUSART_TX_ISR(void)
{
	EUSART_TX_InterruptDisable();
 c88:	8a b1       	in	r24, 0x0a	; 10
 c8a:	8f 7b       	andi	r24, 0xBF	; 191
 c8c:	8a b9       	out	0x0a, r24	; 10
	if(EUSART_TxInterruptHandler)
 c8e:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <EUSART_TxInterruptHandler>
 c92:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <EUSART_TxInterruptHandler+0x1>
 c96:	30 97       	sbiw	r30, 0x00	; 0
 c98:	09 f0       	breq	.+2      	; 0xc9c <EUSART_TX_ISR+0x14>
	{
		EUSART_TxInterruptHandler();
 c9a:	09 95       	icall
 c9c:	08 95       	ret

00000c9e <EUSART_RX_ISR>:
}

void EUSART_RX_ISR(void)
{
	
	if(EUSART_RxInterruptHandler)
 c9e:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <EUSART_RxInterruptHandler>
 ca2:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <EUSART_RxInterruptHandler+0x1>
 ca6:	30 97       	sbiw	r30, 0x00	; 0
 ca8:	09 f0       	breq	.+2      	; 0xcac <EUSART_RX_ISR+0xe>
	{
		EUSART_RxInterruptHandler();
 caa:	09 95       	icall
	}
	else{ /* NOThing */ }
	
	if(EUSART_FramingErrorHandler)
 cac:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <EUSART_FramingErrorHandler>
 cb0:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <EUSART_FramingErrorHandler+0x1>
 cb4:	30 97       	sbiw	r30, 0x00	; 0
 cb6:	09 f0       	breq	.+2      	; 0xcba <EUSART_RX_ISR+0x1c>
	{
		EUSART_FramingErrorHandler();
 cb8:	09 95       	icall
	}
	else{ /* NOThing */ }
	
	if(EUSART_OverrunErrorHandler)
 cba:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <EUSART_OverrunErrorHandler>
 cbe:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <EUSART_OverrunErrorHandler+0x1>
 cc2:	30 97       	sbiw	r30, 0x00	; 0
 cc4:	09 f0       	breq	.+2      	; 0xcc8 <EUSART_RX_ISR+0x2a>
	{
		EUSART_OverrunErrorHandler();
 cc6:	09 95       	icall
 cc8:	08 95       	ret

00000cca <_exit>:
 cca:	f8 94       	cli

00000ccc <__stop_program>:
 ccc:	ff cf       	rjmp	.-2      	; 0xccc <__stop_program>
